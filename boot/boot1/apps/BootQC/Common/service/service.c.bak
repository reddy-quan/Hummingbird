/*
**********************************************************************************************************************
*											        eGon
*						           the Embedded GO-ON Bootloader System
*									       eGON arm boot sub-system
*
*						  Copyright(C), 2006-2010, SoftWinners Microelectronic Co., Ltd.
*                                           All Rights Reserved
*
* File    :
*
* By      : Jerry
*
* Version : V2.00
*
* Date	  :
*
* Descript:
**********************************************************************************************************************
*/

#include "types.h"
/*
*******************************************************************************
*                     xDelay_Unit
*
* Description:
*    void
*
* Parameters:
*    CoreClk  :  input. 系统时钟频率. 单位 : Mhz
*
* Return value:
*    void
*
* note:
*    void
*
*******************************************************************************
*/
__u32 xDelay_Unit(__u32 CoreClk)
{
    return (CoreClk * 1000 * 1000) / 1000;
}
/*
*******************************************************************************
*                     xDelayMS
*
* Description:
*    void
*
* Parameters:
*    Milliseconds  :  input. 单位：毫秒
*
* Return value:
*    void
*
* note:
*    void
*
*******************************************************************************
*/
void xDelayMS(__u32 Milliseconds)
{
    __u32 cnt = 1;

    cnt = Milliseconds * xDelay_Unit(240);
    while(cnt--);
}


void  delay_240_no_cache( __u32 ms )    // CPU frequence is 240Mhz, no cache
{
	__u32 count;
	__u32 i;

	for( i = 0, count = ms * 1100;  i < count;  i++ )
		;
}



void  delay_240_icache( __u32 ms )       // CPU frequence is 240Mhz, enable icache
{
	__u32 count;
	__u32 i;

	for( i = 0, count = ms * 34000;  i < count;  i++ )
		;
}

#define cache_line_size 			32
#define DEFAULT_CLOCK               25

void  CleanFlushDCacheRegion(__u32 addr, __u32 cnt)
{
	__u32 start,end;
	__u32 i;
	__u32 *mem = (__u32 *)addr;

	/*flush clean D-CACHE part*/
	start = (__u32)mem & (~(cache_line_size - 1));
	end = ((__u32)mem + cnt) & (~(cache_line_size - 1));

	for (i = start; i <= end; i += cache_line_size)
	{
		__asm{MCR p15,0,i,c7,c14,1};
	}
}

